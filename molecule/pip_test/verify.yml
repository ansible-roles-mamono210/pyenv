---
- name: Verify
  hosts: all

  tasks:
    - name: Check whether pyenv is installed
      become: yes
      become_user: "{{ linux_user }}"
      ansible.builtin.shell: |
        bash -c "{{ pyenv_root }}/bin/pyenv --version"
      register: PYENV_INSTALLED
      changed_when: false

    - name: Make sure pyenv is installed
      ansible.builtin.debug:
        var: PYENV_INSTALLED

    - name: Set Python 3.9.2
      become: yes
      become_user: "{{ linux_user }}"
      ansible.builtin.command: |
        bash -c "{{ pyenv_root }}/bin/pyenv global 3.9.2"

    - name: Check pip is upgraded
      become: yes
      become_user: "{{ linux_user }}"
      ansible.builtin.shell: |
        bash -c "{{ pyenv_root }}/versions/3.9.2/bin/pip --version"
      register: PIP_UPGRADED
      changed_when: false

    - name: Make sure pip is upgraded
      ansible.builtin.debug:
        var: PIP_UPGRADED

    - name: Check whether Ansible is installed
      become: yes
      become_user: "{{ linux_user }}"
      ansible.builtin.shell: |
        bash -c "{{ pyenv_root }}/versions/3.9.2/bin/ansible --version"
      register: ANSIBLE_INSTALLED
      changed_when: false

    - name: Make sure Ansible is installed
      ansible.builtin.debug:
        var: ANSIBLE_INSTALLED

    - name: Check whether yamllint is installed
      become: yes
      become_user: "{{ linux_user }}"
      ansible.builtin.shell: |
        bash -c "{{ pyenv_root }}/versions/3.9.2/bin/yamllint --version"
      register: YAMLLINT_INSTALLED
      changed_when: false

    - name: Make sure yamllint is installed
      ansible.builtin.debug:
        var: YAMLLINT_INSTALLED

    - name: Set Python 3.8.7
      become: yes
      become_user: "{{ linux_user }}"
      ansible.builtin.command: |
        bash -c "{{ pyenv_root }}/bin/pyenv global 3.8.7"

    - name: Check pip is upgraded
      become: yes
      become_user: "{{ linux_user }}"
      ansible.builtin.shell: |
        bash -c "{{ pyenv_root }}/versions/3.8.7/bin/pip --version"
      register: PIP_UPGRADED
      changed_when: false

    - name: Make sure pip is upgraded
      ansible.builtin.debug:
        var: PIP_UPGRADED

    - name: Check whether Ansible is installed
      become: yes
      become_user: "{{ linux_user }}"
      ansible.builtin.shell: |
        bash -c "{{ pyenv_root }}/versions/3.8.7/bin/ansible --version"
      register: ANSIBLE_INSTALLED
      changed_when: false

    - name: Make sure Ansible is installed
      ansible.builtin.debug:
        var: ANSIBLE_INSTALLED

    - name: Check whether yamllint is installed
      become: yes
      become_user: "{{ linux_user }}"
      ansible.builtin.shell: |
        bash -c "{{ pyenv_root }}/versions/3.8.7/bin/yamllint --version"
      register: YAMLLINT_INSTALLED
      changed_when: false

    - name: Make sure yamllint is installed
      ansible.builtin.debug:
        var: YAMLLINT_INSTALLED

    - name: Change the global Python version
      become: yes
      become_user: "{{ linux_user }}"
      ansible.builtin.command: |
        bash -c "{{ pyenv_root }}/bin/pyenv global \"{{ pyenv_global }}\""

    - name: Check whether Python(s) installed by 'pyenv install' command
      become: yes
      become_user: "{{ linux_user }}"
      ansible.builtin.shell: |
        bash -c "{{ pyenv_root }}/bin/pyenv versions"
      register: PYENV_VERSIONS
      changed_when: false
      when:
        - pyenv_python_installs is defined

    - name: Make sure Pythons(s) installed
      ansible.builtin.assert:
        that:
          - "'{{ item }}' in PYENV_VERSIONS.stdout"
      with_items: "{{ pyenv_python_installs }}"
      when:
        - pyenv_python_installs is defined

    - name: Check OS version
      ansible.builtin.command: cat /etc/redhat-release
      register: OS_VERSION
      changed_when: false

    - name: Show OS version
      ansible.builtin.debug:
        var: OS_VERSION
